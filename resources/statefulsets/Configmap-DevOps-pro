Problems with environment Variables :- If i want to pass the same key value pair in multiple pods then I required to copy the same env variables 
in all the pods yaml files i.e, Repetation. From this we get to know that the scope of env variable is specific to the pod.

 This repetative work can be avoided by using configmap.
 
> A configmap is an API(application programm interface) object used to store non-confidential data in key value pairs.
> Scope of configmap is only to namespace. Even if the pod is deleted configmap will not delete as both are indipendent.

Creation of Configmap by Imperative Way 

# kubectl create configmap <name> --from-literal=<Key>=<value>

# kubectl create configmap <name> --from-literal=<Key>=<value>--from-literal=<Key>=<value>  =>For creation of Configmap with multiple keyvalue pairs 

# kubectl create configmap <name> --from-file=<file-name>    => Creation of Configmap by file which consists multiple keyvalue pairs.


Configmap in Pods = How to attach configmap to pod.

1. Attach entair Config map ( entair key value pairs of configmap) as environment variable.
here name of the Configmap is the KEY and the Data or key-value pairs inside the configmap file is VALUE

 # kubectl create configmap configmap-demo-1 --from-literal=wordpress_version="5.2.2"--from-literal=wordpress_user="ubuntu"

vi cm-1.yml
---
apiVersion: v1
kind: Pod
metadata:
  name: configmap-demo-1
spec:
  containers:
  - name: demo-container
    image: nginx
    envFrom:
    - configMapRef:     => Specifies entire configmap is using as a environment variable 
       name: configmap-1
...

# kubectl apply -f <file-name.yaml>            =>To apply the YAML files 
# kubectl get pods                             => To see the pods running in your Kubernetes cluster
# kubectl get cm                               => To see the ConfigMaps created in your Kubernetes cluster
#kubectl exec -it <pod-name> -- printenv       => To see the environment variables set in a running pod
#kubectl exec -it <pod-name> -- bash           => To go inside a running pod  

2. Assigning the value of one of the key-value pair present in the configmap file to the environment variable.

---
apiVersion: v1
kind: Pod
metadata:
  name: configmap-demo-2
spec:
  containers:
  - name: demo-container
    image: nginx
    env:
    - name: VERSION   ==> This is KEY of the env variable
      valueFrom:      ==> Value of the key is from
        configMapKeyRef:  => Here i am allocting the value of key(wordpress_version)present in the configmap file(configmap-1) to the key(VERSION) 
          name: configmap-1        => Name of the configmap file in which key value is present. 
          key: wordpress_version   => Name of the key present in configmap file whose value you are substituting with env variable/key (VERSION) 
...

# kubectl apply -f <file-name.yaml>            =>To apply the YAML files 
# kubectl get pods                             => To see the pods running in your Kubernetes cluster
# kubectl get cm                               => To see the ConfigMaps created in your Kubernetes cluster
# kubectl exec -it <pod-name> -- printenv       => To see the environment variables set in a running pod
# kubectl exec -it <pod-name> -- bash           => To go inside a running pod


3. Creating configmap from the file which consists of multiple key-value pairs and add this configmap to the pod by creating a volume over it.

Create data-file and add all the key value pairs of variables 

#vi data-file 

username="root"
password="12345"

# kubectl create configmap cm-3 --from-file=data-file  => Create configmap from file


vi cm-3.yml
---
apiVersion: v1
kind: Pod
metadata:
  name: configmap-demo-3
spec:
  containers:
  - name: demo-container
    image: nginx
    volumeMounts:
      - name: config             => Name of the volume created inside the pod
        mountPath: /etc/config   => Path where the volume by name config is mounted over the pod
  volumes:
  - name: config        => Name of the volume created over the pod
    configMap:          => Value to the volume by name config is assigned from the configmap(cm-3) created above
      name: cm-3
... 

# kubectl apply -f cm-3.yml 
# kubectl get po 
# kubectl exec -it configmap-demo-3 --bash => to go inside the pod 
# cd /etc/config => ls => data-file 
# cat data-file => username="root" & password="12345"




 






