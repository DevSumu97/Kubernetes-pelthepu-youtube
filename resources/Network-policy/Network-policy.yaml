apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: test-network-policy
  namespace: default
spec:
  podSelector:  # This tells Kubernetes which Pods this NetworkPolicy applies to — in this case, all Pods in the same namespace that have the label: role: db
    matchLabels:
      role: db
  policyTypes:  # The policyTypes field tells Kubernetes which directions of traffic the NetworkPolicy will control for the selected Pods.
  - Ingress     # You explicitly define Ingress rules (who can talk to the Pod). This policy will restrict and control both incoming and outgoing traffic for the Pods it selects.
  - Egress      # You explicitly define Egress rules (where the Pod can talk to).
  ingress:
  - from:   # from: defines the sources (allowed senders) of incoming traffic for the Pods (the ones under podSelector ie, pods with label role:db in default namespace).
    - ipBlock:   #allows incoming traffic from IPs in that range, except those inside the excluded subnet.
        cidr: 172.17.0.0/16  #Host range: 172.17.0.1 → 172.17.255.254 # Total usable IPs: ≈ 65,534
        except:
        - 172.17.1.0/24 # It’s a smaller subnet inside the bigger 172.17.0.0/16 network.# Host range: 172.17.1.1 → 172.17.1.254 #Total usable IPs: 254
    - namespaceSelector: # It allows connections from All Pods ir-respective of labels from the Namespace with the label "project: myproject", As we have "-" consider it as seperate rule
        matchLabels:
          project: myproject
    - podSelector:   # It allows connections from Pods in the Defaul Namespace with the label role=frontend, As we have "-" consider it as a seperate ingress rule
        matchLabels:
          role: frontend
    ports:
    - protocol: TCP
      port: 6379 # Only accepts the traffic from port 6379
#It contains three elements in the from array, and allows connections from Pods in the default Namespace with the label role: frontend,or from any Pods in namespace with the 
#label "project: myproject" ......The dash (-) means this is a separate ingress rule entry.
  egress:
  - to:          # Specifies where these Pods are allowed to send traffic.
    - ipBlock:   # Means traffic can go to external IP ranges, not just inside the cluster.
        cidr: 10.0.0.0/24  # 10.0.0.1 → 10.0.0.254 (254 usable)
    ports:
    - protocol: TCP
      port: 5978
# This allows outbound traffic (egress) from the Pods labeled role=db in default namespace to any IP address within 10.0.0.0/24, only on TCP port 5978.



Behavior of to and from selectors

#This policy contains a single from element allowing connections from Pods with the label role=client in namespaces with the label user=alice. 
 ...
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          user: alice
      podSelector:
        matchLabels:
          role: client
  ...

The below contains two elements in the from array, and allows connections from Pods in the local Namespace with the label role=client, 
 or from any Pod in any namespace with the label user=alice.

 ...
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          user: alice
    - podSelector:
        matchLabels:
          role: client
  ...

 Default policies
 ==============
By default, if no policies exist in a namespace, then all ingress and egress traffic is allowed to and from pods in that namespace

Default deny all ingress traffic You can create a "default" ingress isolation policy for a namespace by creating a NetworkPolicy that selects all pods but does not allow any 
ingress traffic to those pods.

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny-ingress
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  ----
  
Allow all ingress traffic
=>If you want to allow all incoming connections to all pods in a namespace, you can create a policy that explicitly allows that.
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-all-ingress
spec:
  podSelector: {}
  ingress:
  - {}
  policyTypes:
  - Ingress

Default deny all egress traffic
You can create a "default" egress isolation policy for a namespace by creating a NetworkPolicy that selects all pods but does not allow any egress traffic from those pods.
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny-egress
spec:
  podSelector: {}
  policyTypes:
  - Egress
  
Allow all egress traffic
If you want to allow all connections from all pods in a namespace, you can create a policy that explicitly allows all outgoing connections from pods in that namespace.

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-all-egress
spec:
  podSelector: {}
  egress:
  - {}
  policyTypes:
  - Egress


Default deny all ingress and all egress traffic

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny-all
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress


Targeting multiple namespaces by label

kubectl label namespace frontend namespace=frontend
kubectl label namespace backend namespace=backend

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: egress-namespaces
spec:
  podSelector:
    matchLabels:
      app: myapp
  policyTypes:
  - Egress
  egress:
  - to:
    - namespaceSelector:
        matchExpressions:
        - key: namespace
          operator: In
          values: ["frontend", "backend"]
